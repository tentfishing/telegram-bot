import logging
import os
import pyotp
import qrcode
import re
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.WARNING,  # –£—Ä–æ–≤–µ–Ω—å WARNING (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏)
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ httpx (HTTP-–∑–∞–ø—Ä–æ—Å—ã)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ python-telegram-bot (INFO-—Å–æ–æ–±—â–µ–Ω–∏—è)
logging.getLogger("telegram").setLevel(logging.WARNING)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if BOT_TOKEN is None:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env.")

ADMIN_IDS = os.getenv('ADMIN_IDS')
if ADMIN_IDS is None:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env.")
ADMIN_IDS = [int(id) for id in ADMIN_IDS.split(',')]

# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ (—Ä—É—Å—Å–∫–∏–µ, –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏ –º–∞—Ç–µ—Ä–Ω—ã–µ)
STOP_WORDS_RU = [
    "—Ä–∞–±–æ—Ç–∞", "–≤–∞–∫–∞–Ω—Å–∏–∏", "—Ä–µ–∫–ª–∞–º–∞", "—Å–∫–∏–¥–∫–∞", "–≤—ã–∏–≥—Ä–∞–π", "–ø—Ä–∏–∑", "–¥–µ–Ω—å–≥–∏", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", 
    "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ø–∞—Ä—Ç–Ω—ë—Ä–∫–∞", "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è", "–¥–æ—Ö–æ–¥", "–æ–Ω–ª–∞–π–Ω", "–æ—Ñ—Ñ–ª–∞–π–Ω", "–±–∏–∑–Ω–µ—Å", 
    "–ø—Ä–æ–µ–∫—Ç", "—É—Å–ª—É–≥–∏", "—Å—Ä–æ—á–Ω–æ", "–∫—ç—à–±—ç–∫", "—Å—Ç–∞–≤–∫–∏", "–∫–∞–∑–∏–Ω–æ", "–∏–≥—Ä–∞—Ç—å", "–≤—ã–∏–≥—Ä—ã—à", 
    "–¥–∂–µ–∫–ø–æ—Ç", "—Ä—É–ª–µ—Ç–∫–∞", "–ø–æ–∫–µ—Ä", "–ª–æ—Ç–µ—Ä–µ—è", "—Ç—É—Ä–Ω–∏—Ä", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "—Å–∫–∞—á–∞—Ç—å", 
    "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è", "–≤—Ö–æ–¥", "–ª–æ–≥–∏–Ω", "–ø–∞—Ä–æ–ª—å", "–∞–∫–∫–∞—É–Ω—Ç", "–ø—Ä–æ—Ñ–∏–ª—å", 
    "–ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–≤—ã–≤–æ–¥", "–ø–µ—Ä–µ–≤–æ–¥", "–æ–ø–ª–∞—Ç–∞", "–∫–∞—Ä—Ç–∞", "–∫–æ—à–µ–ª—ë–∫", "–∫—Ä–∏–ø—Ç–∞", "–±–∏—Ç–∫–æ–∏–Ω", 
    "—ç—Ñ–∏—Ä", "—Ç–æ–∫–µ–Ω", "–º–∞–π–Ω–∏–Ω–≥", "—Ñ–µ—Ä–º–∞", "–æ–±–º–µ–Ω", "–∫—É—Ä—Å", "–≤–∞–ª—é—Ç–∞", "–¥–æ–ª–ª–∞—Ä", "—Ä—É–±–ª—å", 
    "–µ–≤—Ä–æ", "–∑–∞–π–º", "–∫—Ä–µ–¥–∏—Ç", "–∏–ø–æ—Ç–µ–∫–∞", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞", "–¥–æ–ª–≥", "—Ñ–∏–Ω–∞–Ω—Å—ã", "–±–∞–Ω–∫", "—Å—á—ë—Ç", 
    "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–∞–π—Ç", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "—Å–µ—Ä–≤–∏—Å", "—Ä–∞—Å—Å—ã–ª–∫–∞", "–Ω–æ–≤–æ—Å—Ç–∏", "—Å—Ç–∞—Ç—å—è", "–±–ª–æ–≥", 
    "–∫—É—Ä—Å", "–æ–±—É—á–µ–Ω–∏–µ", "—Ç—Ä–µ–Ω–∏–Ω–≥", "–≤–µ–±–∏–Ω–∞—Ä", "–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å", "–∫–æ—É—á–∏–Ω–≥", "–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫", 
    "—ç–∫—Å–ø–µ—Ä—Ç", "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è", "–∫–∞—Ä—å–µ—Ä–∞", "—Ä–µ–∑—é–º–µ", "–æ–ø—ã—Ç", "–∑–∞—è–≤–∫–∞", "–∞–Ω–∫–µ—Ç–∞", 
    "—Ñ–æ—Ä–º–∞", "–æ–ø—Ä–æ—Å", "—Ç–µ—Å—Ç", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "—É—Å–ø–µ—Ö", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "—Ü–µ–ª—å", "–º–µ—á—Ç–∞", "–ø–ª–∞–Ω", 
    "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è", "—Å—Ö–µ–º–∞", "—Å–µ–∫—Ä–µ—Ç", "–º–µ—Ç–æ–¥", "—Ç–µ—Ö–Ω–∏–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "—Å–∏—Å—Ç–µ–º–∞", "–±–æ—Ç", 
    "—Å–∫—Ä–∏–ø—Ç", "–∫–æ–¥", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–¥–∏–∑–∞–π–Ω", "–ª–æ–≥–æ—Ç–∏–ø", "–±—Ä–µ–Ω–¥", "–∫–æ–º–ø–∞–Ω–∏—è", "—Ñ–∏—Ä–º–∞", 
    "—Å—Ç–∞—Ä—Ç–∞–ø", "–∏–Ω–Ω–æ–≤–∞—Ü–∏—è", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–≥–∞–¥–∂–µ—Ç", "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–ø—Ä–∏–±–æ—Ä", "—Ä–µ–º–æ–Ω—Ç", 
    "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "–¥–æ–≥–æ–≤–æ—Ä", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "—É—Å–ª–æ–≤–∏—è", "–ø—Ä–∞–≤–∏–ª–∞", 
    "–ø–æ–ª–∏—Ç–∏–∫–∞", "–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∑–∞—â–∏—Ç–∞", "–≥–∞—Ä–∞–Ω—Ç", "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", 
    "–ø—Ä–æ–≥–Ω–æ–∑", "—Ç—Ä–µ–Ω–¥", "–∞–Ω–∞–ª–∏–∑", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–æ—Ç—á—ë—Ç", "–≥—Ä–∞—Ñ–∏–∫", "—Ç–∞–±–ª–∏—Ü–∞", "–¥–∏–∞–≥—Ä–∞–º–º–∞", 
    "—Ä–æ—Å—Ç", "–ø—Ä–∏–±—ã–ª—å", "–æ–±–æ—Ä–æ—Ç", "–ø–æ—Ç–æ–∫", "–∫–ª–∏–µ–Ω—Ç—ã", "–∞—É–¥–∏—Ç–æ—Ä–∏—è", "—Ç—Ä–∞—Ñ–∏–∫", "–ª–∏–¥—ã", 
    "–∫–æ–Ω–≤–µ—Ä—Å–∏—è", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—Ç–∞—Ä–≥–µ—Ç", "–∫–æ–Ω—Ç–µ–∫—Å—Ç", "seo", "–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ", "—Ä–∞—Å–∫—Ä—É—Ç–∫–∞", 
    "—Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å", "–±—é–¥–∂–µ—Ç", "–≤–ª–æ–∂–µ–Ω–∏—è", "–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å", "—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å", "–ø–∞—Å—Å—Å–∏–≤–Ω—ã–π", 
    "–∞–∫—Ç–∏–≤–Ω—ã–π", "—É–¥–∞–ª—ë–Ω–Ω–æ", "–æ—Ñ–∏—Å", "–≥—Ä–∞—Ñ–∏–∫", "—Å–º–µ–Ω—ã", "–∑–∞–¥–∞—á–∏", "–ø—Ä–æ—Ü–µ—Å—Å", "—ç—Ç–∞–ø—ã", 
    "—à–∞–≥–∏", "—Ä–µ—à–µ–Ω–∏–µ", "–ø—Ä–æ–±–ª–µ–º–∞", "–≤—ã–∑–æ–≤", "–∫–æ–Ω–∫—É—Ä—Å", "—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ", "–∞–∫—Ç–∏–≤–∞—Ü–∏—è", 
    "–ø—Ä–æ–º–æ–∫–æ–¥", "–∫–æ–¥", "—Å—Å—ã–ª–∫–∞", "–ø–µ—Ä–µ—Ö–æ–¥", "–∫–ª–∏–∫", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "–¥–æ—Å—Ç—É–ø", "–ø–∞–∫–µ—Ç", 
    "—Ç–∞—Ä–∏—Ñ", "–∞–±–æ–Ω–µ–º–µ–Ω—Ç", "—á–ª–µ–Ω—Å—Ç–≤–æ", "—á–∞—Ç"
]

BAD_WORDS_RU = [
    "–±–ª—è—Ç—å", "—Å—É–∫–∞", "–ø–∏–∑–¥–µ—Ü", "—Ö—É–π", "–µ–±–∞—Ç—å", "–µ–±–∞–Ω—ã–π", "–ø–∏–¥–æ—Ä", "–≥–∞–Ω–¥–æ–Ω", "–º—É–¥–∞–∫", "–¥–æ–ª–±–æ—ë–±", 
    "—É—ë–±–æ–∫", "—Ç–≤–∞—Ä—å", "—Å—É—á–∫–∞", "—Ö—É—ë–≤–æ", "–ø–∏–∑–¥–∞", "–∂–æ–ø–∞", "–Ω–∞—Ö—É–π", "–µ–±–∞–ª–æ", "–∑–∞–ª—É–ø–∞", "–ø–∏–∑–¥–µ–∂", 
    "–≥–æ–≤–Ω–æ", "—Å—Ä–∞—Ç—å", "–¥–µ—Ä—å–º–æ", "–±–ª—è", "—à–ª—é—Ö–∞", "–ø–æ—Ç–∞—Å–∫—É—Ö–∞", "–ø–∏–¥–æ—Ä–∞—Å", "—Ö—É–µ—Å–æ—Å", "–µ–±–ª–∞–Ω", 
    "–¥–µ–±–∏–ª", "–∏–¥–∏–æ—Ç", "–∫—Ä–µ—Ç–∏–Ω", "—É—Ä–æ–¥", "–≤—ã—Ä–æ–¥–æ–∫", "–ø—Ä–∏–¥—É—Ä–æ–∫", "–æ—Ç–º–æ—Ä–æ–∑–æ–∫", "—á–º–æ", "—Å–∫–æ—Ç–∏–Ω–∞", 
    "–∫–æ–∑—ë–ª", "–±–∞—Ä–∞–Ω", "—Ç—É–ø–æ–π", "–≥–ª—É–ø—ã–π", "—Ç–æ—Ä–º–æ–∑", "–ø–æ–∑–æ—Ä", "–≥–Ω–∏–¥–∞", "–ø–∞–¥–ª–∞", "—Å–≤–æ–ª–æ—á—å", "–≥–∞–¥"
]

STOP_WORDS_EN = [
    "work", "job", "buy", "sell", "order", "delivery", "free", "discount", "promo", "advertising", 
    "win", "prize", "money", "earn", "invest", "referral", "partner", "income", "online", "business", 
    "cash", "bonus", "gift", "quick", "easy", "casino", "bet", "play", "jackpot", "lottery", 
    "signup", "register", "login", "payment", "withdraw", "bitcoin", "crypto", "trading", "profit", 
    "course", "training", "webinar", "coach", "expert", "service", "platform", "app", "download", 
    "link", "click"
]

# –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤
STOP_WORDS = STOP_WORDS_RU + STOP_WORDS_EN + BAD_WORDS_RU

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
LINK_PATTERN = re.compile(
    r'(?:https?:\/\/|www\.|ftp\.|t\.me\/|@|bit\.ly\/|tinyurl\.com\/|goo\.gl\/|ow\.ly\/|t\.co\/|'
    r'bit\.do\/|buff\.ly\/|adf\.ly\/|shorte\.st\/|cutt\.us\/|u\.to\/|tiny\.cc\/|is\.gd\/|v\.gd\/|'
    r'cli\.gs\/|qr\.ae\/|tr\.im\/|vur\.me\/|bc\.vc\/|twitthis\.com\/|su\.pr\/|snipurl\.com\/|'
    r'ity\.im\/|short\.ie|sh\.com|lnkd\.in|fwd4\.me|prettylinkpro\.com|bl\.ink|dlvr\.it|'
    r'[\w\-]+\.(com|ru|org|net|me|io|co|uk|de|fr|es|it|nl|pl|info|biz|online|xyz|site|blog|shop|store))'
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_secrets = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 2FA
admin_verified = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def generate_secret_key(user_id):
    secret = pyotp.random_base32()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    admin_secrets[user_id] = secret
    return secret

# –°–æ–∑–¥–∞–Ω–∏–µ URI –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Authenticator
def generate_google_authenticator_uri(user_id, secret):
    return pyotp.totp.TOTP(secret).provisioning_uri(
        name=f"Admin_{user_id}",  # –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        issuer_name="AntiSpamBot"  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ Google Authenticator
def verify_google_authenticator_code(user_id, code):
    if user_id not in admin_secrets:
        return False
    secret = admin_secrets[user_id]
    totp = pyotp.TOTP(secret)
    return totp.verify(code)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in ADMIN_IDS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        if not is_admin(user_id):
            await update.message.reply_text("üö´ –≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        # –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º /setup_2fa
        if user_id not in admin_secrets:
            await setup_2fa(update, context)
        else:
            await update.message.reply_text(
                "ü§ñ –Ø –±–æ—Ç-–∞–Ω—Ç–∏—Å–ø–∞–º! –ü–æ–º–æ–≥–∞—é –¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à—É –¥—Ä—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —á–∏—Å—Ç–æ—Ç–µ! üßπ\n\n"
                "üìñ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: /ruls",
                parse_mode='Markdown'
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setup_2fa (–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Authenticator)
async def setup_2fa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        if not is_admin(user_id):
            await update.message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        secret = generate_secret_key(user_id)

        # –°–æ–∑–¥–∞–Ω–∏–µ URI –¥–ª—è Google Authenticator
        uri = generate_google_authenticator_uri(user_id, secret)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await update.message.reply_text(
            "üîê –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA) —Å –ø–æ–º–æ—â—å—é Google Authenticator:\n\n"
            f"1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Authenticator.\n"
            f"2. –ù–∞–∂–º–∏—Ç–µ '+' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'.\n"
            f"3. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é:\n\n"
            f"–ö–ª—é—á: `{secret}`\n\n"
            f"4. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Google Authenticator –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            parse_mode='Markdown'
        )

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞
        img = qrcode.make(uri)
        bio = BytesIO()
        img.save(bio, format="PNG")
        bio.seek(0)
        await context.bot.send_photo(chat_id=user_id, photo=bio, caption="QR-–∫–æ–¥ –¥–ª—è Google Authenticator")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ setup_2fa: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ Google Authenticator)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        if not is_admin(user_id):
            await update.message.reply_text("üö´ –≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –∫–æ–¥ 2FA –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in admin_secrets and user_id not in admin_verified:
            if verify_google_authenticator_code(user_id, text):
                admin_verified[user_id] = True  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª 2FA
                await update.message.reply_text("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã.")
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        # –ï—Å–ª–∏ 2FA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if user_id in admin_verified and admin_verified[user_id]:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞, –º–∞—Ç –∏ —Å—Å—ã–ª–∫–∏
            detected_stop_word = next((word for word in STOP_WORDS if word in text.lower()), None)
            has_link = LINK_PATTERN.search(text)

            if detected_stop_word or has_link:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.delete()

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
                if detected_stop_word:
                    if detected_stop_word in BAD_WORDS_RU:
                        violation_reason = f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –∏–ª–∏ –º–∞—Ç: *{detected_stop_word}*!"
                    else:
                        violation_reason = f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ: *{detected_stop_word}*!"
                else:
                    detected_link = has_link.group(0)
                    violation_reason = f"üö´ –°—Å—ã–ª–∫–∞: *{detected_link}*!"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                violation_warning = (
                    f"üõ°Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ!* üõ°Ô∏è\n\n"
                    f"{violation_reason}\n"
                    "‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.\n"
                    "üôÖ‚Äç‚ôÇÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞!\n"
                    "üß± –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ!\n\n"
                    "üìñ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: /ruls"
                )
                keyboard = [[InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ö†Ô∏è", callback_data=f"report_{update.message.from_user.id}_{text[:50]}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await context.bot.send_message(
                    chat_id=update.message.chat_id,
                    text=violation_warning,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                user = update.message.from_user
                admin_text = (
                    f"‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ!* ‚ö†Ô∏è\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user.id})\n"
                    f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: `{text}`\n"
                    f"üîó –ù–∞—Ä—É—à–µ–Ω–∏–µ: {violation_reason}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {update.message.date}\n\n"
                    f"‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞.\n"
                    f"üìñ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: /ruls"
                )
                keyboard = [[InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å üö´", callback_data=f"ban_{user.id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                for admin_id in ADMIN_IDS:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=admin_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_text: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if query.from_user.id not in ADMIN_IDS:
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        user_id = int(query.data.split('_')[1])
        chat_id = query.message.chat_id

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—á–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
        await context.bot.ban_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            revoke_messages=True  # –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
        )
        await query.edit_message_text(
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞! üö´\n\n"
                 f"üìñ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: /ruls",
            parse_mode='Markdown'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ ban_user: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ"
async def report_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        data = query.data.split('_')
        user_id = int(data[1])
        reported_text = '_'.join(data[2:])  # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
        report_text = (
            f"‚ö†Ô∏è *–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–º–∞* ‚ö†Ô∏è\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {query.from_user.first_name} (ID: {user_id})\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: `{reported_text}`\n"
            f"‚è∞ –í—Ä–µ–º—è: {query.message.date}\n\n"
            "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–Ω–µ—Å–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."
        )
        
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(
                chat_id=admin_id,
                text=report_text,
                parse_mode='Markdown'
            )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
        await query.edit_message_text(
            text=f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!\n\nüìñ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: /ruls",
            parse_mode='Markdown'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ report_error: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        if not is_admin(user_id):
            await update.message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
            return

        help_text = (
            "üõ† *–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)* üõ†\n\n"
            "üîπ */start* - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ü§ñ\n"
            "üîπ */setup_2fa* - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA) üîê\n"
            "üîπ */help* - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤—ã –∑–¥–µ—Å—å) ‚ÑπÔ∏è\n\n"
            "‚ÑπÔ∏è –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA)."
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ help_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("setup_2fa", setup_2fa))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        application.add_handler(CallbackQueryHandler(ban_user, pattern=r"ban_\d+"))
        application.add_handler(CallbackQueryHandler(report_error, pattern=r"report_\d+_.+"))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üåü")
        application.run_polling()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main: {e}")

if __name__ == '__main__':
    main()